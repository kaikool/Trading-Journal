// @ts-check
// @ts-ignore
// @filename: prepare-github-deploy.mjs

/**
 * Script chu·∫©n b·ªã cho tri·ªÉn khai GitHub Actions
 * 
 * Script n√†y gi√∫p:
 * 1. T·∫°o file config.js t·ª´ config-template.js
 * 2. Thay th·∫ø c√°c bi·∫øn m√¥i tr∆∞·ªùng v·ªõi gi√° tr·ªã t·ª´ GitHub Secrets
 * 3. ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c file c·∫ßn thi·∫øt ƒë·ªÅu c√≥ trong build
 * 
 * S·ª≠ d·ª•ng: Ch·∫°y script n√†y trong quy tr√¨nh CI/CD tr∆∞·ªõc khi build.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// L·∫•y ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i trong ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ƒê∆∞·ªùng d·∫´n t·ªõi c√°c file
const CONFIG_TEMPLATE_PATH = path.join(__dirname, '../public/config-template.js');
const CONFIG_OUTPUT_PATH = path.join(__dirname, '../public/config.js');
const CONFIG_DIST_PATH = path.join(__dirname, '../dist/config.js');

// ƒê·ªçc template
try {
  console.log('üìÑ ƒê·ªçc file config template...');
  const templateContent = fs.readFileSync(CONFIG_TEMPLATE_PATH, 'utf8');

  // Thay th·∫ø c√°c gi√° tr·ªã t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  console.log('üîÑ Thay th·∫ø c√°c bi·∫øn m√¥i tr∆∞·ªùng...');
  const projectId = process.env.VITE_FIREBASE_PROJECT_ID || 'YOUR_PROJECT_ID';
  
  let configContent = templateContent
    .replace(/YOUR_PROJECT_ID/g, projectId)
    .replace(/YOUR_API_KEY/g, process.env.VITE_FIREBASE_API_KEY || 'YOUR_API_KEY')
    .replace(/YOUR_APP_ID/g, process.env.VITE_FIREBASE_APP_ID || 'YOUR_APP_ID')
    .replace(/YOUR_MEASUREMENT_ID/g, process.env.VITE_FIREBASE_MEASUREMENT_ID || 'YOUR_MEASUREMENT_ID')
    .replace(/YOUR_SENDER_ID/g, process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || 'YOUR_SENDER_ID')
    .replace(/YOUR_REGION/g, 'asia-southeast1'); // Thay b·∫±ng v√πng th·ª±c t·∫ø c·ªßa b·∫°n

  // Ghi file config.js
  console.log('üíæ Ghi file config.js...');
  fs.writeFileSync(CONFIG_OUTPUT_PATH, configContent);
  
  // ƒê·∫£m b·∫£o th∆∞ m·ª•c dist t·ªìn t·∫°i v√† sao ch√©p c·∫•u h√¨nh v√†o ƒë√≥
  try {
    if (fs.existsSync(path.join(__dirname, '../dist'))) {
      fs.writeFileSync(CONFIG_DIST_PATH, configContent);
      console.log('‚úÖ ƒê√£ sao ch√©p config.js v√†o th∆∞ m·ª•c dist/');
    }
  } catch (err) {
    console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ sao ch√©p config.js v√†o th∆∞ m·ª•c dist: ', err.message);
  }
  
  console.log('‚úÖ ƒê√£ t·∫°o file config.js th√†nh c√¥ng!');
  
  // Ki·ªÉm tra c√°c file quan tr·ªçng kh√°c
  console.log('üîç Ki·ªÉm tra c√°c file quan tr·ªçng kh√°c...');
  const criticalFiles = [
    path.join(__dirname, '../firebase.json'),
    path.join(__dirname, '../storage.rules')
  ];
  
  for (const file of criticalFiles) {
    if (fs.existsSync(file)) {
      console.log(`  ‚úì File ${path.basename(file)} t·ªìn t·∫°i.`);
    } else {
      console.error(`  ‚úó C·∫¢NH B√ÅO: File ${path.basename(file)} kh√¥ng t·ªìn t·∫°i!`);
    }
  }
  
  console.log('\nüöÄ ƒê√£ chu·∫©n b·ªã xong cho tri·ªÉn khai!');
  
} catch (error) {
  console.error('‚ùå L·ªói khi chu·∫©n b·ªã cho tri·ªÉn khai:', error);
  process.exit(1);
}